// 1. 3개의 점수를 각 입력받아 총점 계산 하여 총점이 90 이상이면 '성공' 아니면 '실패' 출력하시오.

// let 점수1 = Number(prompt('[문제1] 점수1 입력'))
// let 점수2 = Number(prompt('[문제1] 점수2 입력'))
// let 점수3 = Number(prompt('[문제1] 점수3 입력'))

// let 총점 = Number( (점수1 + 점수2 + 점수3) / 3 )
// let 합격 = 총점 >= 90 ? '성공' : '실패'
// console.log( 합격 )

// 2. 2개의 정수를 각 입력받아 더 큰수를 출력 하시오.

// let 정수1 = Number(prompt('[문제2] 정수1 입력'))
// let 정수2 = Number(prompt('[문제2] 정수2 입력'))

// let 큰수 = 정수1 > 정수2 ? 정수1 : 정수2 ;
// console.log( 큰수 )

// 3. 3개의 정수를 각 입력받아 가장 큰수를 출력 하시오.

// let 정수3 = Number(prompt('[문제3] 정수1 입력'))
// let 정수4 = Number(prompt('[문제3] 정수2 입력'))
// let 정수5 = Number(prompt('[문제3] 정수3 입력'))

// if( 정수3 > 정수4 ) { console.log( 정수3 ); }
// else if( 정수3 > 정수5 ){ console.log( 정수3 ); }
// else if( 정수4 > 정수3 ){ console.log( 정수4 ); }
// else if( 정수4 > 정수5 ){ console.log( 정수4 ); }
// else if( 정수5 > 정수3 ){ console.log( 정수5 ); }
// else if( 정수5 > 정수4 ){ console.log( 정수5 ); }

// [정답]

// let 정수1 = Number( prompt( '[문제3] 정수1 입력' ))
// let 정수2 = Number( prompt( '[문제3] 정수1 입력' ))
// let 정수3 = Number( prompt( '[문제3] 정수1 입력' ))
// let max = 정수1 // 첫번째 값을 가장 큰 값(max) 로 선정
// if( max < 정수2){ max = 정수2; } // 만약에 두번째 값이 가장큰값 보다 크면 가장큰값(max)을 두번째값 으로 대입
// if( max < 정수3){ max = 정수3; } // 만약에 세번째 값이 가장큰값 보다 크면 가장큰값(max)을 세번째값 으로 대입
// console.log( max )  

//     // if vs if ~ else
//     // 조건이 다수일 때 if(조건1) if(조건2) if(조건3) vs if(조건1) ~ else if(조건2) ~ else if(조건3)
//     // - 다수 조건의 다수결과 vs 다수 조건의 1개 결과
//     // if if if - 각 if별 여러개 조건문 vs if ~ else if ~ else if 하나의 조건문

// 4. 3개의 정수를 각 입력받아 오름차순 또는 내림차순 하여 정렬해서 출력하시오. 

// let 정수6 = Number(prompt('[문제4] 정수1 입력'))
// let 정수7 = Number(prompt('[문제4] 정수2 입력'))
// let 정수8 = Number(prompt('[문제4] 정수3 입력'))

// let 오름차순 = [ ]

// if( 정수6 < 정수7 )
//     if( 정수6 < 정수8 ) { 오름차순.push( 정수6 ); }
// if( 정수7 < 정수6 )
//     if( 정수7 < 정수8 ) { 오름차순.push( 정수7 ); }
// if( 정수8 < 정수6 )
//     if( 정수8 < 정수7 ) { 오름차순.push( 정수8 ); }
// if( 정수6 > 정수7 )
//     if( 정수6 < 정수8 ) { 오름차순.push( 정수6 ); }
// if( 정수7 > 정수6 )
//     if( 정수7 < 정수8 ) { 오름차순.push( 정수7 ); }
// if( 정수8 > 정수6 )
//     if( 정수8 < 정수7 ) { 오름차순.push( 정수8 ); }
// if( 정수6 > 정수7 )
//     if( 정수6 > 정수8 ) { 오름차순.push( 정수6 ); }
// if( 정수7 > 정수6 )
//     if( 정수7 > 정수8 ) { 오름차순.push( 정수7 ); }
// if( 정수8 > 정수6 )
//     if( 정수8 > 정수7 ) { 오름차순.push( 정수8 ); }

// console.log ( 오름차순 )

// let 내림차순 = [ ]

// if( 정수6 > 정수7 )
//     if( 정수6 > 정수8 ) { 내림차순.push( 정수6 ); }
// if( 정수7 > 정수6 )
//     if( 정수7 > 정수8 ) { 내림차순.push( 정수7 ); }
// if( 정수8 > 정수6 )
//     if( 정수8 > 정수7 ) { 내림차순.push( 정수8 ); }
// if( 정수6 > 정수7 )
//     if( 정수6 < 정수8 ) { 내림차순.push( 정수6 ); }
// if( 정수7 > 정수6 )
//     if( 정수7 < 정수8 ) { 내림차순.push( 정수7 ); }
// if( 정수8 > 정수6 )
//     if( 정수8 < 정수7 ) { 내림차순.push( 정수8 ); }
// if( 정수6 < 정수7 )
//     if( 정수6 < 정수8 ) { 내림차순.push( 정수6 ); }
// if( 정수7 < 정수6 )
//     if( 정수7 < 정수8 ) { 내림차순.push( 정수7 ); }
// if( 정수8 < 정수6 )
//     if( 정수8 < 정수7 ) { 내림차순.push( 정수8 ); }

// 정답

/*
    A  B  C
    7  5  10 --> 오름차순 : 5 7 10 , 내림차순 : 10 7 5
    [ 1. 정렬/비교 ]                                                              A     B     C
            (오름차순)                                                            10    7     9
                1. A와 B 비교 해서 B가 더 작으면 B를 A와 B 값 교제 A<--->B          7     10    9   교환O
                1. A와 C 비교 해서 B가 더 작으면 B를 A와 B 값 교제 A<--->C          7     10    9   교환X
                1. B와 C 비교 해서 B가 더 작으면 B를 A와 B 값 교제 B<--->C          7     9     10  교환O
            (내림차순)
    [ 2. 교환 ]
        - 한번에 2개 연산을 동시에 처리할 수 없다. 무조건 연산은 1개씩 처리한다.
        - 변수는 *무조건* 데이터/자료 1개만 저장 ...
        - 주의할점    
            A = B ; A변수에 B를 대입하면 기존의 A갑은 사라진다.
            A = B; B = A; // - 컴퓨터 순차처리 이므로 A값은 이미 사라졌다.
        - swap 방법
            임시변수 temp 활용
            let temp = A; A = B; B = temp;
*/

// let 정수1 = Number(prompt('[문제4] 정수1 입력'))
// let 정수2 = Number(prompt('[문제4] 정수2 입력'))
// let 정수3 = Number(prompt('[문제4] 정수3 입력'))

// if( 정수1 > 정수2 ){ 
//     let temp = 정수1; // A값을 temp 대입
//     정수1 = 정수2;  // B값을 A에 대입
//     정수2 = temp;  // temp값을 B에 대입
//     // A 와 B 변수간의 값은 교체 되었다.
// }
// if( 정수1 > 정수3 ){ let temp = 정수1; 정수1 = 정수3; 정수3 = temp;}
// if( 정수2 > 정수3 ){ let temp = 정수2; 정수2 = 정수3; 정수3 = temp;}
// console.log( `[4] 오름차순  : ${ 정수1 } ${ 정수2 } ${ 정수3 }` )

// if( 정수1 < 정수2 ){ 
//     let temp = 정수1; // A값을 temp 대입
//     정수1 = 정수2;  // B값을 A에 대입
//     정수2 = temp;  // temp값을 B에 대입
//     // A 와 B 변수간의 값은 교체 되었다.
// }
// if( 정수1 < 정수3 ){ 
//     let temp = 정수1; 정수1 = 정수3; 정수3 = temp;}
// if( 정수2 < 정수3 ){ 
//     let temp = 정수2; 정수2 = 정수3; 정수3 = temp;}
// console.log( `[4] 내림차순  : ${ 정수1 } ${ 정수2 } ${ 정수3 }` )

// console.log ( 내림차순 )

// 5. 1개의 점수를 입력받아 90점 이상이면 'A등급' 80점이상이면 'B등급' 70점이상 'C등급' 그외 '재시험' 출력하시오.

// let 점수 = Number(prompt('[문제5] 점수 입력'))

// if( 점수 < 70 ){ console.log( '재시험' )}
// else if( 점수 < 80 ){ console.log( 'C등급' )}
// else if( 점수 < 90 ){ console.log( 'B등급' )}
// else { console.log( 'A등급' )}

// 정답

// let 점수 = Number(prompt('[문제5] 점수 입력'))

// if( 점수 >= 90 ){ console.log( 'A등급' )}
// else if( 점수 >= 80 ){ console.log( 'B등급' )}
// else if( 점수 >= 70 ){ console.log( 'C등급' )}
// else { console.log( '재시험' )}

// 6. 아이디와 비밀번호 입력받아 아이디가 'admin' 이고 비밀번호가 '1234' 이면 '로그인 성공' 아니면 '로그인실패' 출력하시오.

// let id = prompt('[문제6] 아이디 입력')
// let passwords = prompt('[문제6] 비밀번호 입력')

// if( id == 'admin' && passwords == '1234'){ console.log( '[6] 결과 : 로그인 성공') }
// else{ console.log( '[6] 결과 : 로그인 실패') }

// 7. 과일 배열 선언하고 let fruitList = [ '바나나' , '사과' ]
// 하나의 과일명을 입력받아 fruitList 에 존재하는 과일이면 '이미 존재하는 과일입니다' 출력 
// 아니면 배열에 입력받은 과일명 저장 하고 현재 배열을 출력하시오.

// let fruitList = [ '바나나' , '사과' ]
// let 과일명 = prompt( '[문제7] 과일명 입력' )
// let 존재여부 = fruitList.indexOf( 과일명 )
// // .indexOf( '찾을값' ) : 지정한 찾을 값이 배여 내 존재하면 찾은 인덱스 반환 없으면 -1 반환
// // .push( 새로운값 ) : 지정ㅎ나 새로운값을 배열내 마지막 인덱스 요소의 추가 함수

// // 만약에 존재여부가 -1 이 아니면 배열내 입력받은 과일명 추가
// if ( 존재여부 == -1 ) { fruitList.push( 과일명 ); console.log ( fruitList ) }     
// // 아니면(존재하면_)
// else { console.log( '[문제7] 이미 존재하는 과일입니다.') }

// 8. 주민등록번호를 입력받아서 성별이 남자이면 색상변수에 'blue' 을 여자이면 'red' 을 대입 하고 색상변수 출력하시오.

// let 주민등록번호 = prompt( ' [문제8] 주민등록번호 입력 ')
// let 색상변수 = 'black'
// // 만약에 입력받은 데이터의 ( 800420-1234567 ) 성별의 자릴수 : 8번째 자리
// // - 문자열은 " ", ' ' , ` ` 으로 감싼 자료 , 'a'=문자 'abc'=문자열 : 컴퓨터는 문자 여러개를 어떻게 구조화??
// // - 문자를 여러개 저장하면 문자배열 ---> 문자열 , c언어는 문자열을 배열로 만들기
// // - 문자 = [ 'a' , 'b' , 'c' ] , - 문자 - [ '유' , '재' , '석' ] 
// // * JS는 문자열을 배열로 취급하기 때문에 배열 함수를 사용할 수 있따. [ 인덱스 사용 가능하다. ]
// let 성별 = ( 주민등록번호[7] + 2 ) % 2

// if ( 성별 == 1 ){ 색상변수 = 'blue'; }
// else { 색상변수 = 'red'; }

// console.log( `[문제9] 결과 : ${ 색상변수}` )
// //*응용
// let outHTML = `<h3 style = 'color : ${ 색상변수 } ' > ${ 주민등록번호 } </h3>`
// document.write( outHTML )

// 9. 가위바위보 게임 
// 조건1 : 가위 0 , 바위 1 , 보 2 입니다.
// 조건2 : 플레이어 2 명 입니다.
// 실행조건 : 각 플레이어가 가위바위보 중에 한번씩 입력받기 
// 출력조건 : 
// 플레이어1 이겼을때 '플레이어1 승리' 출력 하시오.
// 플레이어2 이겼을때 '플레이어2 승리' 출력 하시오.
// 비겼을경우 '무승부' 출력 하시오.

/*
[ 1. 경우의 수 ]
p1 승리 경우 : p1=가위/p2=보 , p1=바위/p2=가위 , p1=보/p2=바위  3개
p2 승리 경우 : p2=가위/p1=보 , p2=바위/p1=가위 , p2=보/p1=바위  3개
무승부 경우 : p1=가위/p2=가위 , p1=바위/p2=바위 , p1=보/p2=보  3개
---> 총 9개 , 비교 연산 9번
( p1 == 0 && p2 == 2 ) || ( p1 == 1 && p2 == 0 ) || ( p1 == 2 && p2 == 1 )
( p2 == 0 && p1 == 2 ) || ( p2 == 1 && p1 == 0 ) || ( p2 == 2 && p1 == 1 )
( p2 == 0 && p1 == 0 ) || ( p2 == 1 && p1 == 1 ) || ( p2 == 2 && p1 == 2 )

[ 2. 계산식 패턴 ]
    1. 두 수가 같으면 무승부 p1 = p2
    2. p1 == (p2+1)%3 나머지가 p1 과 같으면 p1 승리
        ( p1 == 0 && p2 == 2+1 => 3 3%3 == 0 ) || 
         ( p1 == 1 && p2 == 0+1 => 1 1%3 == 1 ) || 
          ( p1 == 2 && p2 == 1+1 => 2 2%3 == 2 )
    3. 그외 p2 승리
*/

// let p1 = prompt( ' [문제9] 플레이어1 (0-가위, 1-바위 , 2-보) : ')
// let p2 = prompt( ' [문제9] 플레이어2 (0-가위, 1-바위 , 2-보) : ')
// if( p1 == (p2+1)%3
//     // 방법 1 : ( p1 == 0 && p2 == 2 ) || ( p1 == 1 && p2 == 0 ) || ( p1 == 2 && p2 == 1 ) 
// ){ console.log( '[문제9] 결과 : 플레이어1 승리')}
// else if ( p1 == p2 ){
//     console.log( '[문제9] 결과 : 무승부')}
// else { console.log( '[문제9] 결과 : 플레이어2 승리') }
 
// 10. 좌석 3개의 상태를 가지는 배열 선언하고 let sheetList = [ 'O' , 'X' , 'O' ]
//     하나의 좌석 순서번호를 입력받아 빈좌석 이면 '예약성공' 아니면 '예약불가' 출력하시오.
//     빈좌석 : 'X'  사용중인좌석 : 'O'

// let sheetList = [ 'O' , 'X' , 'O' ]
// let 예약좌석번호 = prompt( '[문제10] 좌석1, 좌석2 , 좌석3 ')
// // 만약에 배열내 입력받은 인덱스(좌석번호)에 'o'(대문자 o) 이면
// if( sheetList[ 예약좌석번호 - 1 ] == 'O'){  // -1 이유 : 인덱스 순서는 0번부터
//     console.log( '[문제10] 예약 불가')
// }else{
//     console.log ('[문제10] 예약 성공');
//     sheetList[ 예약좌석번호 - 1 ] = 'O'; // 예약성공시 입력받은 좌석에 값 변경
// }


// 11 : 주차장 차량 검색대
//     조건1 : let carArray = [ '250어7142' , '142가7415' ]  : 차량번호
//     조건2 : let locationArray = [ 'A1' , 'B3' ]           : 주차위치
//     조건3 : carArray, locationArray 인덱스가 같은 정보의 차량
//     조건4 : 차량번호 입력받아 내 차량 위치 찾기 

let carArray = [ '250어7142' , '142가7415' ]
let locationArray = [ 'A1' , 'B3' ]
let 차량번호 = prompt( '[문제11] 차량 위치 : 차량번호 입력')
let 존재여부 = carArray.indexOf( 차량번호 )
let 차량위치 = locationArray[ 존재여부 ]

if( 존재여부 == -1 ){ console.log( '입력한 차량번호는 주차 내역이 없습니다.' )}
else{ console.log( `입력한 차량번호의 주차 위치 : ${ 차량위치 }` ) }
// 응용 : 서로 다른 속성의 값들을 하나로 표현하는 방법
// 1. CSV() : '250어7142,A1'
// 2. 객체 : { 차량번호: '250어7142' , 위치 : 'A1' }