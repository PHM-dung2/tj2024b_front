[ 국비 출신 개발자 ]
    - 사회적인 측면 *부정적 이미지*
        1. 그냥 출결만 80% 수료 , 강사
        2. 버스타 -- 포트폴리어
            ---> 혼자 업무 못함
            ---> 회사 알아서 해 ---> 국비 출신 회사 5년 못버팀
            ---> 취업 문제 x , 취업 이후 o , 국비 출신 못해서 안뽑
            ---> 1. 자기주도학습 2. 말

[ 신입 개발자 ] 포화 ---> 지원 300~400 ( 반/그냥/학교/국비 ) 50% 100/200        
    1. 중소기업(대표) 300 ~ 400 , 서류 (4년제 미만 , 전공 이하 , 자격증 이하 )
    2. 포트폴리오(PR) 특색 / 아이디어
    3. 기술 면접 / 테스트 ( )
        ---- > 전공생 분들이 취업 잘한다(x) , 코드 화려하거나 어려운 기술 취업 잘한다(x)
        ---- > 기준 : 꼼꼼하거나 , 책임감 , 말

[ 학원에서 강의 내용이 프로그래밍 언어 ]
[ 언어 ]
    - 영어 학원 , 사람( 영어학습 ) - 말
        - 한국인(한국어) --- 번역(컴파일/인터프리터) --- 미국인(영어)
        - 영어문법( 문자 )/암기 - 규칙
        - 한국어문법( 문자 )/암기 - 규칙

    - 컴퓨터 학원 , 사람( 컴퓨터 언어 ) - 말
        - 사람(HTML/CSS/JS언어)  --- 번역(컴파일/인터프리터) --- 컴퓨터(기계어)
        - HTML/CSS/JS문법 - 규칙

[ 웹 프로그래밍 언어 ]
    - HTML(문자 - 숫자도 문자 취급) : 하이퍼텍스트 마크업 언어   = 뼈대
    - CSS(문자) : 캐스케이딩 스타일 시트 언어 = 옷    --> HTML 없이 독단적 실행 불가능
    - JS(문자,숫자,불리언,객체) : 자바 스크립트 언어          = 행동   --> HTML 없이 독단적 실행 불가능
        HTML( CSS포함 , JS 포함 )

[ JS ]
    - 2009년 이후 node.js 나오면서 백엔드 역할 가능해졌다. 인기 상승
        1. 웹 프로그래밍( HTML,CSS,JS )
        2. 웹 서버( node.js )
        3. 앱 ( REACT.JS NATIVE )
        4. 소프트웨어 ( NW.JS )
            ---> 스타트업 ( 소규모 프로젝트 )

[ JS 적용하는 방법 ]
    1. <body> 마크업에 <script> 마크업 사용
        <script>
            JS코드 작성
        </script>
    2. * JS파일 생성하여 HTML 에서 임포트(불러오기) 사용
        <head> 마크업 안에서 <script src="JS파일경로">
        <script src="파일경로"></script>

[ JS 주석 ]
    1. /* 여러줄 주석 */
    2. // 한줄 주석

[ 리터럴 ]
    - 키보드로부터 직접 입력한 값 그 자체

[ 변수 ]
    - 하나의 자료/데이터를 저장하는 메모리 공간
        1. 변수 만들기
            1. let  2. 변수명  3. =  4. 리터럴/값
            let 변수명 = 리터럴

        2. 변수의 값 호출
            변수명

        3. 변수의 값 수정
            변수명 = 새로운값

        4. 변수의 연산
            let 변수명A = 변수명B +10

        5. 변수의 초기화 , 변수가 생성될 때 처음에 대입되는 행위/작업
            1. let 변수명 = 리터럴;
            2. let 변수명;          <---- undifined(값이 없다.)

[ 배열 ]
    1. 순서대로 번호가 붙인 원소 들이 연속적인 형태로 구성된 데이터 타입
    2. 인덱스? 순서대로 배정된 번호 , 0번 시작 , 길이/총개수 : 3개 이면 인덱스 0 1 2 (n-1)
    3. 배열 선언 : [] 대괄호 / , (쉼표)를 이용한 값을 구분하여 열거 한다.
        let 변수명 = [ 값1 , 값2 , 값3 ]
    4. 배열전체 호출 : 배열변수명
    5. 배열 내 특정한 위치의 요소(값) 호출 : 배열변수명[인덱스]
    6. 배열수정
        1. 전체 수정 : 배열변수명 = [새로운배열]
        2. 특정한 위치의 요소(값) 수정 : 배열변수명[인덱스] = 새로운값
    7. 배열 내 요소 추가 : 
        .push( 새로운값 ) 
        .splice( 삽입할 인덱스 , 0 , 새로운 값 )
    8. 배열 내 요소 삭제 : 
        .splice( 삭제할 인덱스 , 삭제개수)
    9. 배열 내 요소 찾기 : 
        .indexOf( 찾을데이터 ), 배열 내 찾을 데이터가 존재하면 인덱스 반환 없으면 -1 반환

[ 문자열 ]
    1. " " vs ' ' vs ` ` 으로 감싼 자료의 타입
    2. 이스케이프/제어 문자
        1. \n줄바꿈
        2. \t들여쓰기
        3. \"큰따옴표 출력
        4. \'작은따옴표 출력
        5. \\백슬래시 출력
    3. `백틱 템플릿 : 문자열 사이에 변수호출과 연산을 연결하는 문자열 구조 , 선언부 제외
        `문자열A ${ 변수호출 } ${ 연산 } ${ 함수호출 } 문자열B`

[ 연산자 ]
    1. 산술연산자
        + 더하기
        - 빼기
        * 곱하기
        / 나누기
        % 나머지
    2. 연결연산자
        + 연결
    3. 비교연산자
        > 초과
        < 미망
        >= 이상
        <= 이하
        == 같다
        != 다르다
        === (값/타입)같다
        !== (값/타입)다르다
    4. 관계연산자
        && 이면서
        || 이거나
        ! 부정
    5. (복합)대입연산자
        = 대입
        += -= *= /= %= 등
    6. 증감연산자
        변수++
        ++변수
        변수--
        --변수
    7. 삼항연산자 
        조건문 ? 참 : 거짓

[ 조건문 ]
    - 조건결과 에 따른 흐름 제어 , 컴퓨터가 논리(상황에 따른 판단력)적인 사고력을 넣어준다.
    - 예) 내가 돈이 10000원 있으면 택시를 탄다. 아니면 걸어간다.
    - 예) if( 돈>=10000 ){ 택시를 탄다; }else{ 걸어간다; }
    - 형태
        1. IF 조건문 : 조건문을 표현 가능한 문법
                - 조건에 true/false , 비교연산 또는 관계연산
                    if( 3+3 )
        2. IF 형태
            1. if( 조건 ) 참일경우코드;     * 웬만하면 참일경우 코드에도 {} 넣기
            2. if( 조건 ) { 참일경우코드; 참일경우코드; }
            3. if( 조건 ) { 참일경우코드; } 
                else{ 거짓일경우코드; }
        4. if( 조건 ) { 참1일경우코드; } 
            else if( 조건2 ){ 참2일경우코드; }
            else if( 조건3 ){ 참3일경우코드; }
            else if( 조건4 ){ 참4일경우코드; }
            else{ 거짓일경우코드; }
        5. if중첩
            if( 조건 ){
                if( 조건 ){}
                else{ }
            } else{ }

[ 반복문 ]
    1. 조건 충족할 때 특정 범위 내 코드를 반복 실행
    2. 형태
        for( 초기값 ; 조건문 ; 증감식 ){
            실행문;
        }
        1. 초기값 : 반복을 할 때 반복의 카운터
        2. 조건문 : 반복실행문이 실행되는 조건으로 true 이면 [실행문] 아니면 false 이면 for종료
        3. 증감식 : 반복변수의 증가 혹은 감소 변화 연삭식
        4. 실행문 : 조건문이 true 일때 실행할 코드
    3. 배열과 반복문 관계
        1. 배열은 인덱스가 0부터 마지막 인덱스까지 1씩 증가
        2. 배열의 길이 = 배열명.length , 마지막 인덱스 = 배열명.length - 1
        3. 배열 순회 : 배열 내 모든 요소를 하나씩 호출 하는 작업
            for( let index = 0 ; index <= 배열명.length - 1 ; index++ ){
                배열명[index];
            }
    4. for 중첩
        for( ){
            for( ) { 
            }
        }
    5. 키워드
        1. continue : 가장 가까운 for문의 증감식으로 코드흐름 이동
        2. break : 가장 가까운 for문의 { } 종료/탈출 한다.
    6. 무한루프
        for( ; ; ){ }

[ 함수 ]
    1. 미리 명령어(코드)들을 정희하는 구조
    2. 함수 사용 종류
        1. 라이브러리 : 내가 아닌 다른 사람이 만든 함수들 , console.log() , document.querySelector() 등등
        2. 정의함수 : 내가 만든 함수들 , 
    3. JS 함수 종류
        1. 선언적함수 : function 함수명(){}
        2. 익명함수 : functino(){} , let 변수 = function(){}
        3. *화살표(람다) 함수* : ( ) => { } , let 변수 = ( ) => { } 
    4. 선언적함수 만드는 방법
        1. function     : 함수를 만들기 위한 함수 선언 키워드
        2. 함수명       : 관레적으로 카멜표기법( mycar -> myCar , studentscorelist -> studentScoreList )
        3. ( 매개변수1 , 매개변수2 ) : 매개(중매 매)변수 , 함수 호출시 인자값 매개변수에 대입받는 변수
        4. { }          : 함수 호출/실행 시 실행 되는 코드들
        5. return       : 함수가 종료되면서 호출 했던곳으로 반환 값 , 무조건 1개 자료
    5. 함수 호출하는 방법
        1. js 에서 호출 하는 방법 : 함수명( 인자값1 , 인자값2 ) , let 리턴값 = 함수명( 인자값1 , 인자값2 )
        2. html 에서 호출 하는 방법 : <마크업 onclick="함수명( 인자값1 , 인자값2 )">    *html은 리턴값이 없음*
    
    6. 함수 사용 특징
        1. 코드(명령어) 재 활용/사용 , 동일한 코드를 여러번 사용시 효율성이 좋다.
        2. 미리 정의된 코드의 인자값(매개변수)에 따른 서로 다른 결과(리턴값) 얻을 수 있다.
        3. 지역변수 : 함수내 선언된 변수는 함수가 실행 도중에만 메모리 할당되고 함수가 종료되면 지역변수 초기화( 리턴값 )
    7. html 마크업 이벤트 속성
        - <마크업 onXXXX="js코드" />
        1. onclick : 마크업을 클릭했을때 실행되는 js코드
